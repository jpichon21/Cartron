<?php

namespace Proxies\__CG__\Site\CartronBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SousMenu extends \Site\CartronBundle\Entity\SousMenu implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setTitre($titre)
    {
        $this->__load();
        return parent::setTitre($titre);
    }

    public function getTitre()
    {
        $this->__load();
        return parent::getTitre();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setNoteDegustation($noteDegustation)
    {
        $this->__load();
        return parent::setNoteDegustation($noteDegustation);
    }

    public function getNoteDegustation()
    {
        $this->__load();
        return parent::getNoteDegustation();
    }

    public function setElaboration($elaboration)
    {
        $this->__load();
        return parent::setElaboration($elaboration);
    }

    public function getElaboration()
    {
        $this->__load();
        return parent::getElaboration();
    }

    public function setDegre($degre)
    {
        $this->__load();
        return parent::setDegre($degre);
    }

    public function getDegre()
    {
        $this->__load();
        return parent::getDegre();
    }

    public function setContenance($contenance)
    {
        $this->__load();
        return parent::setContenance($contenance);
    }

    public function getContenance()
    {
        $this->__load();
        return parent::getContenance();
    }

    public function setConserver($conserver)
    {
        $this->__load();
        return parent::setConserver($conserver);
    }

    public function getConserver()
    {
        $this->__load();
        return parent::getConserver();
    }

    public function setImage($image)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function setIcone($icone)
    {
        $this->__load();
        return parent::setIcone($icone);
    }

    public function getIcone()
    {
        $this->__load();
        return parent::getIcone();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setIdCollection(\Site\CartronBundle\Entity\Collection $idCollection = NULL)
    {
        $this->__load();
        return parent::setIdCollection($idCollection);
    }

    public function getIdCollection()
    {
        $this->__load();
        return parent::getIdCollection();
    }

    public function setTitreFr($titreFr)
    {
        $this->__load();
        return parent::setTitreFr($titreFr);
    }

    public function getTitreFr()
    {
        $this->__load();
        return parent::getTitreFr();
    }

    public function setDescriptionFr($descriptionFr)
    {
        $this->__load();
        return parent::setDescriptionFr($descriptionFr);
    }

    public function getDescriptionFr()
    {
        $this->__load();
        return parent::getDescriptionFr();
    }

    public function setNoteDegustationFr($noteDegustationFr)
    {
        $this->__load();
        return parent::setNoteDegustationFr($noteDegustationFr);
    }

    public function getNoteDegustationFr()
    {
        $this->__load();
        return parent::getNoteDegustationFr();
    }

    public function setElaborationFr($elaborationFr)
    {
        $this->__load();
        return parent::setElaborationFr($elaborationFr);
    }

    public function getElaborationFr()
    {
        $this->__load();
        return parent::getElaborationFr();
    }

    public function setContenanceFr($contenanceFr)
    {
        $this->__load();
        return parent::setContenanceFr($contenanceFr);
    }

    public function getContenanceFr()
    {
        $this->__load();
        return parent::getContenanceFr();
    }

    public function setConserverFr($conserverFr)
    {
        $this->__load();
        return parent::setConserverFr($conserverFr);
    }

    public function getConserverFr()
    {
        $this->__load();
        return parent::getConserverFr();
    }

    public function setTitreEn($titreEn)
    {
        $this->__load();
        return parent::setTitreEn($titreEn);
    }

    public function getTitreEn()
    {
        $this->__load();
        return parent::getTitreEn();
    }

    public function setDescriptionEn($descriptionEn)
    {
        $this->__load();
        return parent::setDescriptionEn($descriptionEn);
    }

    public function getDescriptionEn()
    {
        $this->__load();
        return parent::getDescriptionEn();
    }

    public function setNoteDegustationEn($noteDegustationEn)
    {
        $this->__load();
        return parent::setNoteDegustationEn($noteDegustationEn);
    }

    public function getNoteDegustationEn()
    {
        $this->__load();
        return parent::getNoteDegustationEn();
    }

    public function setElaborationEn($elaborationEn)
    {
        $this->__load();
        return parent::setElaborationEn($elaborationEn);
    }

    public function getElaborationEn()
    {
        $this->__load();
        return parent::getElaborationEn();
    }

    public function setContenanceEn($contenanceEn)
    {
        $this->__load();
        return parent::setContenanceEn($contenanceEn);
    }

    public function getContenanceEn()
    {
        $this->__load();
        return parent::getContenanceEn();
    }

    public function setConserverEn($conserverEn)
    {
        $this->__load();
        return parent::setConserverEn($conserverEn);
    }

    public function getConserverEn()
    {
        $this->__load();
        return parent::getConserverEn();
    }

    public function setRecetteFr($recetteFr)
    {
        $this->__load();
        return parent::setRecetteFr($recetteFr);
    }

    public function getRecetteFr()
    {
        $this->__load();
        return parent::getRecetteFr();
    }

    public function setRecetteEn($recetteEn)
    {
        $this->__load();
        return parent::setRecetteEn($recetteEn);
    }

    public function getRecetteEn()
    {
        $this->__load();
        return parent::getRecetteEn();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'titreFr', 'descriptionFr', 'noteDegustationFr', 'elaborationFr', 'contenanceFr', 'conserverFr', 'degre', 'image', 'icone', 'titreEn', 'descriptionEn', 'noteDegustationEn', 'elaborationEn', 'contenanceEn', 'conserverEn', 'recetteFr', 'recetteEn', 'id', 'idCollection');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}